using System;
using System.Collections.Generic;

class Point
{
    public int row;
    public int colunm;

    public Point(int r, int c)
    {
        this.row = r;
        this.colunm = c;
    }
}


class MaxSubmatrixSum
{
    static int[,] matrix;
    static bool[,] visited;

    private static void PrintMatrix(List<Point> sequence)
    {
        string divider = "+";
        for (int cols = 0; cols < matrix.GetLength(1); cols++)
            divider = divider + "---+";
        Console.WriteLine(divider);
        for (int rows = 0; rows < matrix.GetLength(0); rows++)
        {
            for (int cols = 0; cols < matrix.GetLength(1); cols++)
            {
                Console.Write("|");
                for (int k = 0; k < sequence.Count; k++)
                    if (sequence[k].row == rows && sequence[k].colunm == cols)
                    {
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        break;
                    }    
                Console.Write("{0,3}", matrix[rows, cols]);
                Console.ForegroundColor = ConsoleColor.Gray;
            }
            Console.WriteLine("|");
            Console.WriteLine(divider);
        }
        Console.WriteLine();
    }

    static void GetArea(int row, int col, List<Point> sequence)
    {
        Point currentPoint = new Point(row, col);
        sequence.Add(currentPoint);
        //Console.Write("{0} {1} {2} ", row, col, sequence.Count);
        //if (sequence.Count > 0)
        //{
        //    Console.Write(" -> ");
        //    for (int i = 0; i < sequence.Count; i++)
        //    {
        //        Console.Write("({0},{1}), ", sequence[i].row, sequence[i].colunm);
        //    }
        //    Console.WriteLine();
        //}
        //else
        //    Console.WriteLine();

        visited[row, col] = true;
        if (row > 0 && col > 0 && !visited[row - 1, col - 1] && matrix[row - 1, col - 1] == matrix[row, col])
            GetArea(row - 1, col - 1, sequence); // left and up

        if (col > 0 && !visited[row, col - 1] && matrix[row, col - 1] == matrix[row, col])
            GetArea(row, col - 1, sequence); // left

        if (row > 0 && col < matrix.GetLength(1) - 1 && !visited[row - 1, col + 1] && matrix[row - 1, col + 1] == matrix[row, col])
            GetArea(row - 1, col + 1, sequence); // right and up

        if (col < matrix.GetLength(1) - 1 && !visited[row, col + 1] && matrix[row, col + 1] == matrix[row, col])
            GetArea(row, col + 1, sequence); // right

        if (row < matrix.GetLength(0) - 1 && col < matrix.GetLength(1) - 1 && !visited[row + 1, col + 1] && matrix[row + 1, col + 1] == matrix[row, col])
            GetArea(row + 1, col + 1, sequence); // right and down

        if (row < matrix.GetLength(0) - 1 && !visited[row + 1, col] && matrix[row + 1, col] == matrix[row, col])
            GetArea(row + 1, col, sequence); // down

        if (row > matrix.GetLength(0) - 1 && col > 0 && !visited[row + 1, col - 1] && matrix[row + 1, col - 1] == matrix[row, col])
            GetArea(row + 1, col - 1, sequence); // left and down

        if (row > 0 && !visited[row - 1, col] && matrix[row - 1, col] == matrix[row, col])
            GetArea(row - 1, col, sequence); // up
    }

    static void Main()

    /* Write a program that finds the largest area of equal neighbor elements 
     * in a rectangular matrix and prints its size. */
    {
        int n;
        int m;

        matrix = new int[,]
        {   {1, 3, 2, 2, 2, 4},
            {3, 3, 3, 2, 4, 4},
            {4, 3, 1, 2, 3, 3},
            {4, 3, 1, 3, 3, 1},
            {4, 3, 3, 3, 1, 1}     };

        Console.Write("Enter 'A' for autogenerated random array or 'P' for hardcoded array: ");
        string s = Console.ReadLine().ToUpper();
        Console.WriteLine();
        if (s == "A")
        {
            Random rnd = new Random();
            n = rnd.Next(5, 10);
            m = rnd.Next(5, 10);
            matrix = new int[n, m];
            for (int row = 0; row < n; row++)
                for (int col = 0; col < m; col++)
                    matrix[row, col] = rnd.Next(5);
        }
        else
        {
            n = matrix.GetLength(0);
            m = matrix.GetLength(1);
        }

        // input is done

        visited = new bool[n, m];
        List<Point> sequence = new List<Point>();
        List<Point> maxSequence = new List<Point>();

        for (int row = 0; row < n - 1; row++)
            for (int col = 0; col < m - 1; col++)
            {
                if (!visited[row, col])
                {
                    GetArea(row, col, sequence);
                    if (sequence.Count > maxSequence.Count)
                    {
                        maxSequence = sequence;
                        sequence = new List<Point>();
                    }
                }
                sequence.Clear();
            }
        Console.WriteLine("Maximum area of equal neighbor elements is {0}",maxSequence.Count);
        PrintMatrix(maxSequence);
    }
}
