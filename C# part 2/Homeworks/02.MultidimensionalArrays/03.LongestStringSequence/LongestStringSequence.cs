using System;
using System.Collections.Generic;

struct Directions
{
    public int rowChange;
    public int colChange;
    public string dirName;

    public Directions(int row, int col, string name)
    {
        rowChange = row;
        colChange = col;
        dirName = name;
    }
}

class MaxSubmatrixSum
{
    static string[] srcSeq = { "CO", "TX", "PB", "BT", "KH" };
    static string[,] matrix;
    static int[,] InitMatrix = 
    {
        {0,2,4,1,4,2},
        {0,0,0,1,2,3},
        {1,2,0,1,4,0},
        {1,2,4,0,4,0},
        {2,2,3,1,0,4},
        {3,3,2,1,2,0},
        {4,2,3,1,4,0},
    };

    static Directions[] directions = new Directions[4]
            {   new Directions( 1,-1,"left and down"),
                new Directions( 1,0,"down"),
                new Directions( 1,1,"right and down"),
                new Directions( 0,1,"right"),
            };

    public static void PrintMatrix(string[,] matrix, int maxRow, int maxCol)
    {
        string divider = "+";
        for (int cols = 0; cols < matrix.GetLength(1); cols++)
            divider = divider + "---+";
        Console.WriteLine(divider);
        for (int rows = 0; rows < matrix.GetLength(0); rows++)
        {
            for (int cols = 0; cols < matrix.GetLength(1); cols++)
            {
                Console.Write("|");
                if (rows == maxRow && cols == maxCol)
                    Console.ForegroundColor = ConsoleColor.Yellow;
                Console.Write("{0,3}", matrix[rows, cols]);
                Console.ForegroundColor = ConsoleColor.Gray;
            }
            Console.WriteLine("|");
            Console.WriteLine(divider);
        }
        Console.WriteLine();
    }

    static int GetSequence(int row, int col, int direction)
    {
        int len = 1;
        int deltaRow = directions[direction].rowChange;
        int deltaCol = directions[direction].colChange;
        while (row + deltaRow < matrix.GetLength(0) &&
                col + deltaCol < matrix.GetLength(1) &&
                col + deltaCol > 0 &&
                matrix[row, col] == matrix[row + deltaRow, col + deltaCol])
        {
            row = row + deltaRow;
            col = col + deltaCol;
            len++;
        }
        return len;
    }

    static void Main()

    /* We are given a matrix of strings of size N x M. Sequences in the matrix we define 
     * as sets of several neighbor elements located on the same line, column or diagonal. 
     * Write a program that finds the longest sequence of equal strings in the matrix. Example:
     *  ha  fifi ho hi
        fo  ha  hi  xx     -> ha, ha, ha
        xxx ho  ha  xx
     */
    {
        Console.Write("Enter 'A' for autogenerated random array or 'P' for hardcoded array: ");
        string s = Console.ReadLine().ToUpper();
        Console.WriteLine();
        int n;
        int m;
        if (s == "A")
        {
            Random rnd = new Random();
            n = rnd.Next(6, 10);
            m = rnd.Next(10, 15);
            matrix = new string[n, m];
            for (int row = 0; row < n; row++)
                for (int col = 0; col < m; col++)
                    matrix[row, col] = srcSeq[rnd.Next(5)];
        }
        else
        {
            n = InitMatrix.GetLength(0);
            m = InitMatrix.GetLength(1);
            matrix = new string[n, m];
            for (int row = 0; row < n; row++)
                for (int col = 0; col < m; col++)
                    matrix[row, col] = srcSeq[InitMatrix[row, col]];
        }

        // input is done

        int maxLen = int.MinValue;
        int maxDirection = 0;
        int maxStartRow = 0;
        int maxStartCol = 0;
        int currLen = -1;

        for (int row = 0; row < n; row++)
            for (int col = 0; col < m; col++)
                for (int direction = 0; direction < 4; direction++)
                {
                    currLen = GetSequence(row, col, direction);
                    if (currLen > maxLen)
                    {
                        maxLen = currLen;
                        maxStartRow = row;
                        maxStartCol = col;
                        maxDirection = direction;
                    }
                }
        PrintMatrix(matrix, maxStartRow, maxStartCol);
        Console.WriteLine("Max sequence lenght is {0}.", maxLen);
        Console.Write("It started at row {0} column {1} (yellow mark)", maxStartRow + 1, maxStartCol + 1);
        Console.WriteLine(" and heading {0}", directions[maxDirection].dirName);
    }
}
